shiny::runApp()
runApp()
runApp()
runApp()
library(datasets)
cars
a = list("test" = cars,"auto" = cars,"t" = a,"e"= a)
a
a$cars
a$test
a[[test]]
a[["test"]]
a[["e"]]
a[["auto"]]
a[["test"]]
test2 = "dies is"
a = list("test" = cars,"auto" = cars,test2 = a,"e"= a)
a[["dies ist"]]
a = list("test" = cars,"auto" = cars,test2 = cars,"e"= a)
a[["dies ist"]]
a
a[[test]]
a = list("test" = cars,"auto" = cars,test2 = cars,"e"= a)
a = list("test" = cars,"auto" = cars,test2 = cars,"e"= cars)
a
a[test]
a[[test]]
a[["test"]]
a[["test"]][1:5]
a[["test"]]
b = a[["test"]]
b
typeof(b)
b = a$"test"
b
typeof(b)
b = a$test
b
typeof(b)
b = as.data.frame(a$test)
b
typeof(b)
typeof(cars)
c= data.frame(c(1,2,3),c(1,3,2))
typeof(cc)
typeof(c)
b
b[1]
b[1,1]
tHalf = c()
matrixH = list("half time" = 5)
matrixH[["half time"]]
tHalf = c(c(tHalf),matrixH[["half time"]])
tHalf
tHalf = c(c(tHalf),matrixH[["half time"]])
tHalf
runApp()
runApp()
runApp()
runApp('~/programmin_job/Animator/Animator')
runApp('~/programmin_job/Animator/Animator')
runApp('~/programmin_job/Animator/Animator')
runApp('~/programmin_job/Animator/Animator')
runApp('~/programmin_job/Animator/Animator')
runApp('~/programmin_job/Animator/Animator')
runApp('~/programmin_job/Animator/Animator')
runApp('~/programmin_job/Animator/Animator')
runApp('~/programmin_job/Animator/Animator')
runApp('~/programmin_job/Animator/Animator')
runApp('~/programmin_job/Animator/Animator')
runApp('~/programmin_job/Animator/Animator')
runApp('~/programmin_job/Animator/Animator')
runApp('~/programmin_job/Animator/Animator')
!is.null(columnNames[["imp_flag"]])
a = data.frame("a" = c(1,2,3), "b" = c(3,2,1))
a
is.null(a[["a"]])
is.null(a[["f"]])
names(a)[names(a)== columnNames[["a"]]] <- "Imp_Flag"
names(a)[names(a)== "a" <- "Imp_Flag"
names(a)[names(a)== "a"] <- "Imp_Flag"
a
runApp('~/programmin_job/Animator/Animator')
runApp('~/programmin_job/Animator/Animator')
a
a["Imp_Flag"]
!is.null(a["test"])
!is.null(names(a)["test"])
!is.null(names(a)["Imp_Flag"])
!is.null(names(a)["s"])
names(a)
!is.null(names(a)["s"])
!is.null(names(a)["b"])
!is.null(names(a)[["b"]])
!is.null(names(a)[["a"]])
!is.null(names(a)["a"])
!is.null("a" %in% names(a))
!is.null("b" %in% names(a))
("b" %in% names(a)
)
("test" %in% names(a))
runApp('~/programmin_job/Animator/Animator')
runApp('~/programmin_job/Animator/Animator')
runApp('~/programmin_job/Animator/Animator')
runApp('~/programmin_job/Animator/Animator')
runApp('~/programmin_job/Animator/Animator')
runApp('~/programmin_job/Animator/Animator')
runApp('~/programmin_job/Animator/Animator')
runApp('~/programmin_job/Animator/Animator')
runApp('~/programmin_job/Animator/Animator')
runApp('~/programmin_job/Animator/Animator')
runApp('~/programmin_job/Animator/Animator')
runApp('~/programmin_job/Animator/Animator')
runApp('~/programmin_job/Animator/Animator')
runApp('~/programmin_job/Animator/Animator')
runApp('~/programmin_job/Animator/Animator')
library(data.table)
a = fread(file.choose())
a
pre1 = a$Mean1
pre2 = a$Mean2
pre3 = a$Mean3
range(pre1)
range(pre2)
range(pre3)
fullRange <- function(x){
return(max(x) - min(x))
}
fullrange(pre3)
fullRange(pre3)
fullRange <- function(x){
return(max(x)/min(x)*100)
}
fullRange(pre3)
b = data.frame(pre1,pre2,pre3)
b
reCurve = max(rank(fullRange(b)))
reCurve
reCurve = (rank(fullRange(b)))
reCurve
reCurve = rank(fullRange(b))
fullRange(b)
b
reCurve = lapply(fullRange(b))
lapply(fullRange(b))
lapply(fun = fullRange(b))
example("lapply")
sapply(b,fullRange)
lapply(b,fullRange)
sapply(b,fullRange,USE.NAMES = FALSE)
sapply(b,fullRange,simplify = TRUE)
sapply(b,fullRange,simplify = array)
sapply(b,fullRange,simplify = ARRAY)
sapply(b,fullRange,simplify = arrange)
sapply(b,fullRange,simplify = array)
c = sapply(b,fullRange,simplify = array)
c
c[1]
as.integer(c[1])
Rate(b)
temp = data.table()
temp = data.table(b)
temp
setkey(setDT(fullRange), b)
setkey(setDT(fullRange), temp)
setkey(setDT(temp), fullRange)
temp
lapply(pre1, fullRange)
sapply(pre1, fullRange)
vapply(pre1, fullRange)
lapply(temp, fullRange)
max(lapply(temp, fullRange))
lapply(temp, fullRange)
lapply(temp, colSums)
lapply(colSums, temp)
lapply(temp, fullRange)
lapply(temp, colSums)
colSums(temp)
colSums(temp)$pre1
colTest = colSums(temp)
colTest$pre1
colTest
as.vector(colTest)
colTest = as.vector(colSums(temp))
colTest
max(colTest)
rank(colTest)
which(rank(colTest) == c(1,2))
which(rank(colTest) == 1)
names(b)
data.frame(names(b), as.vector(colSums(b)))
data.frame(names(b), as.vector(colSums(b)), as.vector(sapply(fullRange,b)))
data.frame(names(b), as.vector(colSums(b)), as.vector(sapply(b,fullRange)))
data.frame("name" = names(b),"sum" = as.vector(colSums(b)),"range" = as.vector(sapply(b,fullRange)))
d = data.frame("name" = names(b),"sum" = as.vector(colSums(b)),"range" = as.vector(sapply(b,fullRange)))
d$sum*d$range
d$sum+(0.5*d$range)
d$sum+d$range^2
plot(b)
e = b
e$n = 1:length(e)
e$n = c(1:length(e))
e$n = c(1:nrow(e))
e
plot(e)
e
plot(e$n,e$pre1)
plot(e$n,e$pre2)
plot(e$n,e$pre4)
plot(e$n,e$pre3)
example
plot
e
c
d
a = fread(file.choose())
a
plot(a$V1,a$Mean1)
plot(a$V1,a$Mean2)
plot(a$V1,a$Mean3)
plot(a$V1,a$Mean6)
plot(a$V1,a$Mean1)
a = fread(file.choose())
plot(a$V1,a$Mean1)
plot(a$V1,a$Mean2)
plot(a$V1,a$Mean3)
a
plot(a$V1,a$Mean)
plot(a$V1,a$Mean2)
plot(a$V1,a$Mean1)
plot(a$V1,a$Mean3)
plot(a$V1,a$Mean1)
slopeInc <- function(x){
return((max(head(x,length(x)/2))/min(tail(x,length(x)/2)))*100)
}
slopeInc(a$Mean1)
slopeInc <- function(x){
return((max(tail(x,length(x)/2))/min(head(x,length(x)/2)))*100)
}
slopeInc(a$Mean1)
slopeInc(a$Mean2)
slopeInc(a$Mean3)
x = a
analysisFrame = data.frame(
"name" = names(x),
"sum" = colSums(x),
"range" = as.vector(sapply(x,range)),
"slope" = as.vector(sapply(x,slopeInc))
)
analysisFrame
x = data.frame()
x$m1 = a$Mean1
x
x = c()
x$m1 = a$Mean1
x$m2 = a$Mean2
x$m3 = a$Mean3
analysisFrame = data.frame(
"name" = names(x),
"sum" = colSums(x),
"range" = as.vector(sapply(x,range)),
"slope" = as.vector(sapply(x,slopeInc))
)
colSums(x)
x
x = data.frame()
x$m1 = a$Mean1
type(a)
typeof(a)
temp
x = temp
analysisFrame = data.frame(
"name" = names(x),
"sum" = colSums(x),
"range" = as.vector(sapply(x,range)),
"slope" = as.vector(sapply(x,slopeInc))
)
analysisFrame = data.frame(
"name" = names(x),
"sum" = colSums(x),
"range" = as.vector(as.vector(sapply(x,range))),
"slope" = as.vector(as.vector(sapply(x,slopeInc)))
)
slopeInc <- function(x){
return((max(tail(x,length(x)/2))/min(head(x,length(x)/2)))*100)
}
as.vector(as.vector(sapply(x,slopeInc)))
as.vector(as.vector(sapply(x,range)))
absRange <- function(x){
return(max(x)-min(x))
}
as.vector(as.vector(sapply(x,absRange)))
analysisFrame = data.frame(
"name" = names(x),
"sum" = colSums(x),
"range" = as.vector(as.vector(sapply(x,absRange))),
"slope" = as.vector(as.vector(sapply(x,slopeInc)))
)
analysisFrame
View(analysisFrame)
View(analysisFrame)
oder(analysisFrame,sum)
setkey(analysisFrame,sum)
analysisFrame = as.data.table(analysisFrame)
analysisFrame
analysisFrame = data.table(
"name" = names(x),
"sum" = colSums(x),
"range" = as.vector(as.vector(sapply(x,absRange))),
"slope" = as.vector(as.vector(sapply(x,slopeInc)))
)
analysisFrame
analysisFrame[order(sum)]
analysisFrame[order(-sum)]
head(analysisFrame$sum,2)
head(analysisFrame,2)
head(analysisFrame$name,2)
head(analysisFrame[order(-sum)]$name,2)
tail(analysisFrame[order(-sum)]$name,1)
analysisFrame$pre2
tail(analysisFrame[order(-sum)]$name,1)
name = "Mean1"
a[[name]]
firstSort = head(analysisFrame[order(-sum)]$name,2)
firstSort
firstSort = head(analysisFrame[order(-sum)],2)
firstSort
firstSort[,mult := range*slope]
firstSort
firstSort = firstSort[order(-mult)]
firstSort
firstSort[1]
firstSort[1]$name
rankFunc <- function(x, withBG){
analysisFrame = data.table(
"name" = names(x),
"sum" = colSums(x),
"range" = as.vector(as.vector(sapply(x,absRange))),
"slope" = as.vector(as.vector(sapply(x,slopeInc)))
)
firstSort = head(analysisFrame[order(-sum)],2)
firstSort[,mult := range*slope]
firstSort = firstSort[order(-mult)]
ControlROIname = firstSort[2]$names
BleachROIname = firstSort[1]$names
ControlROI = x[[ControlROIname]]
BleachROI = x[[BleachROIname]]
if(withBG == TRUE){
BGname = tail(analysisFrame[order(-sum)]$name,1)
BGROI = x[[BGname]]
} else {
BGROI = FALSE
}
output = list("ConROI" = ControlROI, "BleROI" = BleachROI, "BgROI" = BGROI)
return(output)
}
temp
rankFunc(temp,FALSE)
rankFunc(temp,withBG = FALSE)
rankFunc(temp,withBG = TRUE)
x
rankFunc(x,withBG = TRUE)
x = as.data.frame(x)
rankFunc(x,withBG = TRUE)
x = temp
analysisFrame = data.table(
"name" = names(x),
"sum" = colSums(x),
"range" = as.vector(as.vector(sapply(x,absRange))),
"slope" = as.vector(as.vector(sapply(x,slopeInc)))
)
analysisFrame
slopeInc <- function(x){
return((max(tail(x,length(x)/2))/min(head(x,length(x)/2)))*100)
}
absRange <- function(x){
return(max(x)-min(x))
}
rankFunc <- function(x, withBG){
analysisFrame = data.table(
"name" = names(x),
"sum" = colSums(x),
"range" = as.vector(as.vector(sapply(x,absRange))),
"slope" = as.vector(as.vector(sapply(x,slopeInc)))
)
firstSort = head(analysisFrame[order(-sum)],2)
firstSort[,mult := range*slope]
firstSort = firstSort[order(-mult)]
ControlROIname = firstSort[2]$names
BleachROIname = firstSort[1]$names
ControlROI = x[[ControlROIname]]
BleachROI = x[[BleachROIname]]
if(withBG == TRUE){
BGname = tail(analysisFrame[order(-sum)]$name,1)
BGROI = x[[BGname]]
} else {
BGROI = FALSE
}
output = list("ConROI" = ControlROI, "BleROI" = BleachROI, "BgROI" = BGROI)
return(output)
}
rankFunc(x)
rankFunc(x, withBG = TRUE)
analysisFrame = data.table(
"name" = names(x),
"sum" = colSums(x),
"range" = as.vector(as.vector(sapply(x,absRange))),
"slope" = as.vector(as.vector(sapply(x,slopeInc)))
)
firstSort = head(analysisFrame[order(-sum)],2)
firstSort[,mult := range*slope]
firstSort = firstSort[order(-mult)]
ControlROIname = firstSort[2]$names
BleachROIname = firstSort[1]$names
ControlROI = x[[ControlROIname]]
BleachROI = x[[BleachROIname]]
ControlROIname
firstSort
firstSort[1]
firstSort[1]$name
rankFunc <- function(x, withBG){
analysisFrame = data.table(
"name" = names(x),
"sum" = colSums(x),
"range" = as.vector(as.vector(sapply(x,absRange))),
"slope" = as.vector(as.vector(sapply(x,slopeInc)))
)
firstSort = head(analysisFrame[order(-sum)],2)
firstSort[,mult := range*slope]
firstSort = firstSort[order(-mult)]
ControlROIname = firstSort[2]$name
BleachROIname = firstSort[1]$name
ControlROI = x[[ControlROIname]]
BleachROI = x[[BleachROIname]]
if(withBG == TRUE){
BGname = tail(analysisFrame[order(-sum)]$name,1)
BGROI = x[[BGname]]
} else {
BGROI = FALSE
}
output = list("ConROI" = ControlROI, "BleROI" = BleachROI, "BgROI" = BGROI)
return(output)
}
rankFunc(x, withBG = TRUE)
rankFunc <- function(x, withBG = TRUE){
analysisFrame = data.table(
"name" = names(x),
"sum" = colSums(x),
"range" = as.vector(as.vector(sapply(x,absRange))),
"slope" = as.vector(as.vector(sapply(x,slopeInc)))
)
firstSort = head(analysisFrame[order(-sum)],2)
firstSort[,mult := range*slope]
firstSort = firstSort[order(-mult)]
ControlROIname = firstSort[2]$name
BleachROIname = firstSort[1]$name
ControlROI = x[[ControlROIname]]
BleachROI = x[[BleachROIname]]
if(withBG == TRUE){
BGname = tail(analysisFrame[order(-sum)]$name,1)
BGROI = x[[BGname]]
} else {
BGROI = FALSE
}
output = list("ConROI" = ControlROI, "BleROI" = BleachROI, "BgROI" = BGROI)
return(output)
}
rankFunc(x, withBG = TRUE)
rankFunc(x, withBG = FALSE)
assignCols <- function(x, withBG = TRUE){
analysisFrame = data.table(
"name" = names(x),
"sum" = colSums(x),
"range" = as.vector(as.vector(sapply(x,absRange))),
"slope" = as.vector(as.vector(sapply(x,slopeInc)))
)
firstSort = head(analysisFrame[order(-sum)],2)
firstSort[,mult := range*slope]
firstSort = firstSort[order(-mult)]
ControlROIname = firstSort[2]$name
BleachROIname = firstSort[1]$name
ControlROI = x[[ControlROIname]]
BleachROI = x[[BleachROIname]]
if(withBG == TRUE){
BGname = tail(analysisFrame[order(-sum)]$name,1)
BGROI = x[[BGname]]
} else {
BGROI = FALSE
}
output = list("ConROI" = ControlROI, "BleROI" = BleachROI, "BgROI" = BGROI)
return(output)
}
assignCols(x, withBG = FALSE)
namesOfInp = names(x)
columnFinder = which(namesOfInp == BleachROIname)
columnFinder
columnFinder = which(BleachROIname == namesOfInp)
columnFinder
namesOfInp
BleachROIname
ControlROIname = firstSort[2]$name
BleachROIname = firstSort[1]$name
BleachROIname
namesOfInp = names(x)
columnFinder = which(BleachROIname == namesOfInp)
columnFinder
columnFinder = which(BleachROIname == namesOfInp)
areaName = namesOfInp[columnFinder-1]
areaCOL = x[[areaName]]
areaCOL
shiny::runApp()
