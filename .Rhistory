# levenberg marquard algorithm
if(!is.null(summary(fit)$sigma)){
r = summary(fit)$sigma
rif=1-summary(fit)$sigma
}
# adjusting for the input time - was set behind the fitting to reduce singularities
timeCoeff = input$t*0.001
tm = tm*timeCoeff
m1m = tail(m1,length(m1)-(bleach-1))
m2m = tail(m2,length(m2)-(bleach-1))
m3m = tail(m3,length(m3)-(bleach-1))
# show fit
fitpre = predict(fit)
fitpre = tail(fitpre,length(fitpre))
# fitpre = tail(fitpre,length(fitpre)-bleach)
diff = mxxp1m-fitpre
# extract the fitted tau
# D calculation with D = 0.25*r^2 / t12
# http://www.ncbi.nlm.nih.gov/pmc/articles/PMC3731631/
if(!(is.na(as.vector(coef(fit)[2])))){
tau = ((as.vector(coef(fit))[1])/(timeCoeff))
tau2 = ((as.vector(coef(fit))[2])/(timeCoeff))
t12 = ((log(0.5))/(-tau))
t122 = ((log(0.5))/(-tau2))
D = 0.25*a1/(t12)
D2 = 0.25*a1/(t122)
} else {
tau = ((as.vector(coef(fit))[1])/(timeCoeff))
t12 = ((log(0.5))/(-tau))
D = 0.25*a1/t12
tau2 = FALSE
t122 = FALSE
D2 = FALSE
}
a1 = a1[1]
D = D[1]
D2 = D2[1]
output = list("half time" = t12,"quality" = rif,"m1m" = m1m, "m2m" = m2m,"m3m" = m3m,"diff" = diff,"fitpre" = fitpre,
"tm" = tm, "mxxp1m" = mxxp1m,"tau" = tau,"area" = a1,"diffusion" = D, "diffusion2" = D2,
"bleach" = bleach, "tau2" = tau2, "half time2" = t122, "name-m1" = names(m1[1]),
"name-m2" = names(m2[1]), "name-m3" = names(m3[1]), "names-a1" = names(a1[1]) )
return(output)
}
tScatterVector = c()
tHalf = c()
fitQuality = c()
allFits = c()
if(!is.null(d())){
for(i in 1:(length(sctn)-1)){
matrixH = ScatterPlot(d(),i)
tHalf = c(c(tHalf),matrixH[["half time"]])
fitQuality = c(c(fitQuality),matrixH[["quality"]])
if(is.null(allFits)){
allFits = cbind(matrixH[["tm"]],matrixH[["fitpre"]])
} else {
allFits = cbind(allFits,matrixH[["fitpre"]])
}
tHalf = tHalf
tScatterVector = tHalf
sNumber = rep("all fittings",length(tScatterVector))
if(choice == i){
t12 = matrixH[["half time"]]
t122 = matrixH[["half time2"]]
rif2 = matrixH[["quality"]]
#unprocessed ROI means
m1m = matrixH[["m1m"]]
m2m = matrixH[["m2m"]]
m3m = matrixH[["m3m"]]
#names of areas
m1Name = matrixH[["name-m1"]]
m2Name = matrixH[["name-m2"]]
m3Name = matrixH[["name-m3"]]
a1Name = matrixH[["names-a1"]]
diff = matrixH[["diff"]]
fitpre = matrixH[["fitpre"]]
tm = matrixH[["tm"]]
mxxp1m = matrixH[["mxxp1m"]]
tau=matrixH[["tau"]]
tau2 = matrixH[["tau2"]]
D = matrixH[["diffusion"]]
D2 = matrixH[["diffusion2"]]
bleach = matrixH[["bleach"]]
}
}
halfTimeGlobal <<- tHalf
allFitsTable <<- allFits
tScatterVector = tHalf
sNumber = rep("all fittings",length(tScatterVector))
}
# adding data together for ggplot2
p1 = data.frame(mxxp1m,tm,fitpre,diff,m1m,m2m,m3m)
p2 = data.frame(tScatterVector,sNumber,t12)
# data explorer
## graph plot code - if fitting quality is bad, no fitting difference plot is shown (sigma value)
if(rif2 >= input$quality){
adv <- ggplot(p1,aes(y=mxxp1m,x=tm))+geom_point(aes(y=mxxp1m,x=tm),color="black",size=0.3)+geom_abline(intercept=0,slope=0,size=0.8,alpha=0.7,linetype=3)
adv <- adv+geom_abline(intercept=1,slope=0,alpha=0.7,size=0.8,linetype=3)+geom_point()+geom_path(alpha=0.3)
adv <- adv+geom_path(x = tm, y = fitpre,alpha=0.7, color="steelblue3",linetype=1,size=1.2)+expand_limits(y= c(0,1.1))
adv <- adv+theme(aspect.ratio=0.35)+xlab("time in sec")+ylab("relative signal")
bdv <- ggplot(p1,aes(y=diff,x=tm))+geom_abline(intercept=0,slope=0,size=0.5,alpha=0.5)
bdv <- bdv+geom_path(alpha=0.2,size = 0.1)
bdv <- bdv+geom_point(size=0.5)+theme(aspect.ratio=0.35)+xlab("time in sec")+ylab("fitting difference")
bdv <- bdv+stat_smooth(level = 0,method=loess,alpha=0.7, color="steelblue3",linetype=1,size=0.9)
cdv <- ggplot(data = p1,aes(y=m1m,x=tm))+geom_point(aes(y=m1m,x=tm),color="green",size=0.8)
cdv <- cdv+geom_point(aes(y=m2m,x=tm),color="blue",size=0.8)
cdv <- cdv+geom_point(aes(y=m3m,x=tm),color="black",size=0.8)+theme(aspect.ratio=0.35)
cdv <- cdv+xlab("time in sec")+ylab("signal")
if(length(sctn)>3){
edv <- ggplot(data=p2,aes(y=tScatterVector,x=sNumber))+geom_boxplot()+geom_point(size=3,alpha=0.6)+theme(aspect.ratio=0.35)
edv <- edv + geom_point(data=p2, aes(y=t12, x=sNumber), color ="red") + xlab("Scatter Plot") + ylab("t/12 in sec")
multiplot(cdv,adv,edv,bdv,cols=2)
} else {
multiplot(cdv,adv,bdv,cols=2)
}
}
if(rif2 < input$quality) {
adv <- ggplot(p1,aes(y=mxxp1m,x=tm))+geom_point(aes(y=mxxp1m,x=tm),color="black",size=0.3)+geom_abline(intercept=0,slope=0,size=0.8,alpha=0.7,linetype=3)
adv <- adv+geom_abline(intercept=1,slope=0,alpha=0.7,size=0.8,linetype=3)+geom_point()+geom_path(alpha=0.3)
adv <- adv+expand_limits(y= c(0,1.1))
adv <- adv+theme(aspect.ratio=0.35)+xlab("time in sec")+ylab("relative signal")
bdv <- ggplot(p1,aes(y=diff,x=tm))+geom_abline(intercept=0,slope=0,size=0.5,alpha=0.5)
bdv <- bdv+geom_point(size=0.5)
bdv <- bdv+theme(aspect.ratio=0.35)+xlab("time in sec")+ylab("fitting difference")
bdv <- bdv+stat_smooth(level = 0,method=loess,alpha=0.7, color="steelblue3",linetype=1,size=0.9)+geom_path(alpha=0.3,size=0.1)
cdv <- ggplot(data = p1,aes(y=m1m,x=tm))+geom_point(aes(y=m1m,x=tm),color="green",size=0.8)
cdv <- cdv+geom_point(aes(y=m2m,x=tm),color="blue",size=0.8)
cdv <- cdv+geom_point(aes(y=m3m,x=tm),color="black",size=0.8)+theme(aspect.ratio=0.35)
cdv <- cdv+xlab("time in sec")+ylab("signal")
if(length(sctn)>3){
edv <- ggplot(data=p2,aes(y=tScatterVector,x=sNumber))+geom_boxplot()+geom_point(size=3,alpha=0.6)+theme(aspect.ratio=0.35)
edv <- edv + geom_point(data=p2, aes(y=t12, x=sNumber), color ="red") + xlab("Scatter Plot") + ylab("t/12 in sec")
multiplot(cdv,adv,edv,cols=2)
} else {
multiplot(cdv,adv,cols=2)
}
}
#Result display
output$resultOutput <- renderUI({
if(is.null(d()) | is.null(input$mainPanel)){return()}
if(input$mainPanel == "Dataset"){return()}
if(input$ROI == 2) {return ()}
is <- fluidPage(
br(),
h5("Bleach ROI :",m1Name),
h5("Total ROI :",m2Name),
h5("BG ROI :",m3Name),
h5("Bleach Area :",a1Name)
)
})
output$resultOutput3 <- renderUI({
if(is.null(d()) | is.null(input$mainPanel)){return()}
if(input$mainPanel == "Dataset"){return()}
if(input$ROI == 2) {return ()}
is <- fluidPage(
br(),
if(!(is.null(input$quality))){
if(rif2>=input$quality){
h5("Fitting quality: Accepted!")
} else {
code("fitting quality: Not accepted!")
}
},
br(),
if(!(is.null(input$Btime))){
if(input$Btime == 3 & input$action) {
if(input$action > 0){
isolate({
input$action
h5("Pre-bleach value:",input$numInp)
})
}
} else {
if(is.null(bleach)){
h5("Pre-bleach measurements:",bleach)
} else {
code("No pre-bleach values!")
}
}
},
br(),
if(((median(m1m))/(median(m3m))) <= 2){
code("The Background/Bleach ratio is high!")
}
)
})
output$spacingLine <- renderUI({
if(is.null(d()) | is.null(input$mainPanel)){return()}
if(input$mainPanel == "Dataset"){return()}
is <- fluidPage(
br(),
h6("'"),
tags$hr()
)
})
output$spacingLine2 <- renderUI({
if(is.null(d()) | is.null(input$mainPanel)){return()}
if(input$mainPanel == "Dataset"){return()}
is <- fluidPage(
br(),
tags$hr()
)
})
output$resultOutput2 <- renderUI({
if(is.null(d()) | is.null(input$mainPanel)){return()}
if(input$mainPanel == "Dataset"){return()}
if(t122 == FALSE){
is <- fluidPage(
tags$div( class = "test1",
br(),
h5("Tau: ",round(tau,4)," seconds^-1"),
h5("Apparent D:",round(head(D,1),4), "ÂµmeterÂ² per second"),
h5("T1/2: ",round(t12,4)," seconds"),
h5("Standart Error:",round(rif2,4))
)
)
} else {
is <- fluidPage(
br(),
h5("Tau: ",round(tau,4)," seconds^-1"),
h5("Tau2: ",round(tau2,4)," seconds^-1"),
h5("Apparent D:",round(head(D,1),4), "ÂµmeterÂ² per second"),
h5("Apparent D2:",round(head(D2,1),4), "ÂµmeterÂ² per second"),
h5("T1/2: ",round(t12,4)," seconds"),
h5("T1/2 2: ",round(t122,4)," seconds"),
h5("Standart Error:",round((rif2),4))
)}
})
}
)
}
)
d = a
sc = findCountCol(d)
findCountCol <- function(d){
for (i in 1:(ncol(d))) {
if (d[1,i]+2 == d[3,i]) {
sc = d[i]
}
}
return(sc)
}
sc = findCountCol(d)
runApp()
runApp()
runApp()
d
alternate = NULL
for (i in 1:ncol(d)) {
if (d[1,i]+2 == d[3,i]) {
sc = d[i]
}
}
sc
for (i in 1:ncol(d)) {
if (d[1,i]+2 == d[3,i]) {
sc = d[i]
}
}
a
ms = matrix(nrow = nrow(d))
ms
for (i in 1:ncol(d)) {
if (d[1,i]+2 == d[3,i]) {
## input scan time to t algorithm
t = d[i]
}
if(!(head(d[i],1) == tail(d[i],1)) & !head(d[i],1)%%1 == 0 ) {
ms = ifelse(exists("ms"), cbind(ms,d[i]), matrix(nrow = nrow(d)))
#ms = cbind(ms,d[i])
}
}
warnings()
t
for (i in 1:ncol(d)) {
if (d[1,i]+2 == d[3,i]) {
## input scan time to t algorithm
t = d[i]
}
if(!(head(d[i],1) == tail(d[i],1)) & !head(d[i],1)%%1 == 0 ) {
ms = ifelse(exists("ms"), cbind(ms,d[i]), matrix(nrow = nrow(d)))
#ms = cbind(ms,d[i])
}
}
ms
m = extractCols(d)
extractCols <- function(d){
extractTimeCol = function(d){
if (d[1]+2 == d[3]) {
return(TRUE)
} else {
return(FALSE)
}
}
extractRegion = function(d){
if (!(head(d,1) == tail(d,1)) & !head(d,1)%%1 == 0) {
return(TRUE)
} else {
return(FALSE)
}
}
timeCol = lapply(d, extractTimeCol)
regionCol = lapply(d, extractRegion)
t = d[which(timeCol == TRUE)]
region = d[which(regionCol == TRUE)]
return(data.frame(t,region))
}
m = extractCols(d)
b = fread(file.choose())
b
sc = findCountCol(a)
sc = findCountCol(b)
d = b
findCountCol <- function(d){
for (i in 1:(ncol(d))) {
if (d[1,i]+2 == d[3,i]) {
sc = d[i]
}
}
return(sc)
}
sc
ncol(d)
for (i in 1:(ncol(d))) {
if (d[1,i]+2 == d[3,i]) {
sc = d[i]
}
}
sc
d[3]
d[2]
d[5]
d
d = as.data.frame(d)
findCountCol <- function(d){
for (i in 1:(ncol(d))) {
if (d[1,i]+2 == d[3,i]) {
sc = d[i]
}
}
return(sc)
}
findCountCol(d)
sc = findCountCol(d)
sc
sc1b = rbind(tail(sc,nrow(sc)-1),tail(sc,1))
sct = sc-sc1b
sctn = c(0,c(which(sct>2)),nrow(sc))
sctn
runApp()
d = as.data.frame(a)
sc = findCountCol(d)
sc
sc = findCountCol(as.data.frame(b))
sc
a
b
c = 1:50
c
c = b
c
c$number = 1:nrow(c)
c$number
cor(c[[1]],c$number)
cor(c[[2]],c$number)
cor(c[[3]],c$number)
cor(c[[4]],c$number)
cor(c[[5]],c$number)
cor(c[[6]],c$number)
c[[6]]
findCountCol <- function(d){
for (i in 1:(ncol(d))) {
if (d[1,i]+2 == d[3,i] && d[4,i]+2 == d[6,i] && d[6,i]+2 == d[8,i]) {
sc = d[i]
}
}
return(sc)
}
runApp()
d = b
runApp()
b = fread(file.choose())
d = as.data.frame(b)
sc = findCountCol(d)
runApp()
sc
sc1b = rbind(tail(sc,nrow(sc)-1),tail(sc,1))
sct = sc-sc1b
sctn = c(0,c(which(sct>2)),nrow(sc))
sctn
runApp()
sc1b = rbind(tail(sc,nrow(sc)-1),tail(sc,1))
sct = sc-sc1b
sctn = c(0,c(which(sct>2)),nrow(sc))
ms = matrix(nrow = nrow(d))
for (i in 1:ncol(d)) {
if (d[1,i]+2 == d[3,i] && d[4,i]+2 == d[6,i] && d[6,i]+2 == d[8,i]) {
## input scan time to t algorithm
t = d[i]
}
if(!(head(d[i],1) == tail(d[i],1)) & !head(d[i],1)%%1 == 0) {
ms = ifelse(exists("ms"), cbind(ms,d[i]), matrix(nrow = nrow(d)))
#ms = cbind(ms,d[i])
}
}
ms
m = extractCols(d)
m
head(d$Max3,1)%%1 == 0
head(d$Max1,1)%%1 == 0
head(d$Max2,1)%%1 == 0
rm(ms)
ms = matrix(nrow = nrow(d))
for (i in 1:ncol(d)) {
if (d[1,i]+2 == d[3,i] && d[4,i]+2 == d[6,i] && d[6,i]+2 == d[8,i]) {
## input scan time to t algorithm
t = d[i]
}
if(!(head(d[i],1) == tail(d[i],1)) && !head(d[i],1)%%1 == 0) {
ms = ifelse(exists("ms"), cbind(ms,d[i]), matrix(nrow = nrow(d)))
#ms = cbind(ms,d[i])
}
}
ms
m = extractCols(d)
m
m = extractCols(d)
m
rm(m)
m = extractCols(d)
m
timeCol = lapply(d, extractTimeCol)
extractCols <- function(d){
extractTimeCol = function(d){
if (d[1,i]+2 == d[3,i] && d[4,i]+2 == d[6,i] && d[6,i]+2 == d[8,i]) {
return(TRUE)
} else {
return(FALSE)
}
}
extractRegion = function(d){
if (!(head(d,1) == tail(d,1)) & !head(d,1)%%1 == 0) {
return(TRUE)
} else {
return(FALSE)
}
}
timeCol = lapply(d, extractTimeCol)
regionCol = lapply(d, extractRegion)
t = d[which(timeCol == TRUE)]
region = d[which(regionCol == TRUE)]
return(data.frame(t,region))
}
extractRegion = function(d){
if (!(head(d,1) == tail(d,1)) & !head(d,1)%%1 == 0) {
return(TRUE)
} else {
return(FALSE)
}
}
extractTimeCol = function(d){
if (d[1,i]+2 == d[3,i] && d[4,i]+2 == d[6,i] && d[6,i]+2 == d[8,i]) {
return(TRUE)
} else {
return(FALSE)
}
}
timeCol = lapply(d, extractTimeCol)
extractTimeCol = function(d){
if (d[1,i]+2 == d[3,i] && d[4,i]+2 == d[6,i] && d[6,i]+2 == d[8,i]) {
return(TRUE)
} else {
return(FALSE)
}
}
timeCol = lapply(d, extractTimeCol)
extractTimeCol = function(d){
if (d[1,]+2 == d[3,i] && d[4,]+2 == d[6,i] && d[6,]+2 == d[8,]) {
return(TRUE)
} else {
return(FALSE)
}
}
timeCol = lapply(d, extractTimeCol)
d[1,]
extractTimeCol = function(d){
if (d[1,]+2 == d[3,] && d[4,]+2 == d[6,i] && d[6,]+2 == d[8,]) {
return(TRUE)
} else {
return(FALSE)
}
}
d[1,]
timeCol = lapply(d, extractTimeCol)
extractTimeCol = function(d){
if (d[1,]+2 == d[3,] && d[4,]+2 == d[6,] && d[6,]+2 == d[8,]) {
return(TRUE)
} else {
return(FALSE)
}
}
timeCol = lapply(d, extractTimeCol)
extractTimeCol = function(d){
if (d[1]+2 == d[3] && d[4]+2 == d[6] && d[6]+2 == d[8]) {
return(TRUE)
} else {
return(FALSE)
}
}
timeCol = lapply(d, extractTimeCol)
timeCol
runApp()
runApp()
